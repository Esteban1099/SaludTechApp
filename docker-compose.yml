services:

  ingesta_automatizada:
    image: ingesta_automatizada
    container_name: ingesta_automatizada
    ports:
      - "5000:5000"
    environment:
      DB_URI: postgresql://postgres:postgres@database-ingesta_automatizada:5432/backend-ingesta_automatizada-db
      BROKER_HOST: pulsar
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    depends_on:
      database-ingesta_automatizada:
        condition: service_healthy
      pulsar:
        condition: service_healthy

  procesamiento_imagen:
    image: procesamiento_imagen
    container_name: procesamiento_imagen
    ports:
      - "5003:5000"
    environment:
      DB_URI: postgresql://postgres:postgres@database-procesamiento_imagen:5432/backend-procesamiento_imagen-db
      BROKER_HOST: pulsar
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    depends_on:
      database-procesamiento_imagen:
        condition: service_healthy
      pulsar:
        condition: service_healthy
      ingesta_automatizada:
        condition: service_healthy

  canonizacion:
    image: canonizacion
    container_name: canonizacion
    ports:
      - "5002:5002"
    environment:
      DB_URI: postgresql://postgres:postgres@database-canonizacion:5432/backend-canonizacion-db
      BROKER_HOST: pulsar
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5002/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    depends_on:
      database-canonizacion:
        condition: service_healthy
      pulsar:
        condition: service_healthy
      procesamiento_imagen:
        condition: service_healthy

  bff:
    image: bff
    container_name: bff
    ports:
      - "5001:5000"
    environment:
      BROKER_HOST: pulsar
      INGESTA_AUTOMATIZADA_HOST: ingesta_automatizada
    depends_on:
      pulsar:
        condition: service_healthy
      ingesta_automatizada:
        condition: service_healthy
      procesamiento_imagen:
        condition: service_healthy
      canonizacion:
        condition: service_healthy

  monitor:
    image: monitor
    container_name: monitor
    environment:
      BROKER_HOST: pulsar
      INGESTA_AUTOMATIZADA_HOST: ingesta_automatizada
      CANONIZACION_HOST: canonizacion
      STA3_HOST: procesamiento_imagen
    depends_on:
      ingesta_automatizada:
        condition: service_healthy
      procesamiento_imagen:
        condition: service_healthy
      canonizacion:
        condition: service_healthy

  notificaciones:
    image: notificaciones
    container_name: notificaciones
    environment:
      BROKER_HOST: pulsar
    depends_on:
      pulsar:
        condition: service_healthy
      ingesta_automatizada:
        condition: service_healthy
      procesamiento_imagen:
        condition: service_healthy
      canonizacion:
        condition: service_healthy

  pulsar:
    image: apachepulsar/pulsar:latest
    container_name: pulsar
    command: [ "bin/pulsar", "standalone" ]
    ports:
      - "6650:6650"  # Puerto para clientes Pulsar
      - "8080:8080"  # Puerto para la API REST de Pulsar
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/admin/v2/brokers/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  database-ingesta_automatizada:
    image: postgres
    container_name: database-ingesta_automatizada
    ports:
      - "5480:5432"
    environment:
      POSTGRES_DB: backend-ingesta_automatizada-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 5s
      retries: 5

  database-procesamiento_imagen:
    image: postgres
    container_name: database-procesamiento_imagen
    ports:
      - "5481:5432"
    environment:
      POSTGRES_DB: backend-procesamiento_imagen-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 5s
      retries: 5

  database-canonizacion:
    image: postgres
    container_name: canonizacion-db
    ports:
      - "5482:5432"
    environment:
      POSTGRES_DB: backend-canonizacion-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 5s
      retries: 5